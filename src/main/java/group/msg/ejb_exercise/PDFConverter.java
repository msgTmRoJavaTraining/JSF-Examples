package group.msg.ejb_exercise;


import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfWriter;

import javax.ejb.Stateless;

import java.io.*;
import java.util.Date;
import java.util.List;

@Stateless
public class PDFConverter implements Serializable {
    private static String FILE = "C:\\Users\\nicoll\\Desktop\\employee.pdf";
    private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
            Font.BOLD);
    private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.NORMAL, BaseColor.RED);
    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.BOLD);

    public InputStream exportEmployeeAsPDF(List<Employee> emps){
        Document document = new Document();
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        try {
            PdfWriter.getInstance(document, outputStream);
            document.open();
            addMetaData(document);
            addTitlePage(document);
            addContent(document,emps);
            document.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        ByteArrayInputStream bis = new ByteArrayInputStream(outputStream.toByteArray());
        return bis;
    }

    private static void addMetaData(Document document) {
        document.addTitle("Employee pdf converter");
        document.addSubject("Using iText");
        document.addKeywords("Java, PDF, iText");
    }

    private static void addTitlePage(Document document)
            throws DocumentException {
        Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, 1);
        // Lets write a big header
        preface.add(new Paragraph("Employees document export", catFont));

        addEmptyLine(preface, 1);
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph(
                "Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                smallBold));
        addEmptyLine(preface, 3);
        preface.add(new Paragraph(
                "This document contains a list of employees and their data: \n",
                smallBold));
        document.add(preface);
    }

    private static void addContent(Document document, List<Employee>emps) throws DocumentException {
        Chunk ck= new Chunk();
        int contor = 1;
        for(Employee emp:emps){
            ck.append("Emp"+ contor+ "--->");
            ck.append("CNP: " + emp.getCNP()+ " -- ");
            ck.append("Name: " + emp.getName()+ " -- ");
            ck.append("role: " + emp.getRole()+ " ");
            ck.append("\n");
            contor +=1;
        }
        document.add( new Paragraph( ck ) );
        //document.add( Chunk.NEWLINE );
    }


    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }

}
